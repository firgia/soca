// Mocks generated by Mockito 5.3.2 from annotations
// in soca/test/mock/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i15;
import 'package:flutter_dotenv/src/dotenv.dart' as _i5;
import 'package:flutter_dotenv/src/parser.dart' as _i7;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:onesignal_flutter/onesignal_flutter.dart' as _i8;
import 'package:onesignal_flutter/src/create_notification.dart' as _i11;
import 'package:onesignal_flutter/src/defines.dart' as _i9;
import 'package:onesignal_flutter/src/outcome_event.dart' as _i3;
import 'package:onesignal_flutter/src/permission.dart' as _i10;
import 'package:soca/core/core.dart' as _i14;
import 'package:soca/data/data.dart' as _i13;
import 'package:soca/data/providers/providers.dart' as _i12;
import 'package:soca/logic/bloc/language/language_bloc.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIOSOptions_0 extends _i1.SmartFake implements _i2.IOSOptions {
  _FakeIOSOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_1 extends _i1.SmartFake
    implements _i2.AndroidOptions {
  _FakeAndroidOptions_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_2 extends _i1.SmartFake implements _i2.LinuxOptions {
  _FakeLinuxOptions_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_3 extends _i1.SmartFake
    implements _i2.WindowsOptions {
  _FakeWindowsOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_4 extends _i1.SmartFake implements _i2.WebOptions {
  _FakeWebOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_5 extends _i1.SmartFake implements _i2.MacOsOptions {
  _FakeMacOsOptions_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOSOutcomeEvent_6 extends _i1.SmartFake
    implements _i3.OSOutcomeEvent {
  _FakeOSOutcomeEvent_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLanguageState_7 extends _i1.SmartFake implements _i4.LanguageState {
  _FakeLanguageState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DotEnv].
///
/// See the documentation for Mockito's code generation for more information.
class MockDotEnv extends _i1.Mock implements _i5.DotEnv {
  @override
  Map<String, String> get env => (super.noSuchMethod(
        Invocation.getter(#env),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void clean() => super.noSuchMethod(
        Invocation.method(
          #clean,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get(
    String? name, {
    String? fallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [name],
          {#fallback: fallback},
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String? maybeGet(
    String? name, {
    String? fallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeGet,
          [name],
          {#fallback: fallback},
        ),
        returnValueForMissingStub: null,
      ) as String?);
  @override
  _i6.Future<void> load({
    String? fileName = r'.env',
    _i7.Parser? parser = const _i7.Parser(),
    Map<String, String>? mergeWith = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
          {
            #fileName: fileName,
            #parser: parser,
            #mergeWith: mergeWith,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void testLoad({
    String? fileInput = r'',
    _i7.Parser? parser = const _i7.Parser(),
    Map<String, String>? mergeWith = const {},
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #testLoad,
          [],
          {
            #fileInput: fileInput,
            #parser: parser,
            #mergeWith: mergeWith,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isEveryDefined(Iterable<String>? vars) => (super.noSuchMethod(
        Invocation.method(
          #isEveryDefined,
          [vars],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i2.FlutterSecureStorage {
  @override
  _i2.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_0(
          this,
          Invocation.getter(#iOptions),
        ),
        returnValueForMissingStub: _FakeIOSOptions_0(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i2.IOSOptions);
  @override
  _i2.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_1(
          this,
          Invocation.getter(#aOptions),
        ),
        returnValueForMissingStub: _FakeAndroidOptions_1(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i2.AndroidOptions);
  @override
  _i2.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_2(
          this,
          Invocation.getter(#lOptions),
        ),
        returnValueForMissingStub: _FakeLinuxOptions_2(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i2.LinuxOptions);
  @override
  _i2.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_3(
          this,
          Invocation.getter(#wOptions),
        ),
        returnValueForMissingStub: _FakeWindowsOptions_3(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i2.WindowsOptions);
  @override
  _i2.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_4(
          this,
          Invocation.getter(#webOptions),
        ),
        returnValueForMissingStub: _FakeWebOptions_4(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i2.WebOptions);
  @override
  _i2.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_5(
          this,
          Invocation.getter(#mOptions),
        ),
        returnValueForMissingStub: _FakeMacOsOptions_5(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i2.MacOsOptions);
  @override
  _i6.Future<void> write({
    required String? key,
    required String? value,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<String?> read({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<String?>.value(),
        returnValueForMissingStub: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);
  @override
  _i6.Future<bool> containsKey({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<void> delete({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<Map<String, String>> readAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i6.Future<Map<String, String>>);
  @override
  _i6.Future<void> deleteAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [OneSignal].
///
/// See the documentation for Mockito's code generation for more information.
class MockOneSignal extends _i1.Mock implements _i8.OneSignal {
  @override
  _i6.Future<void> setAppId(String? appId) => (super.noSuchMethod(
        Invocation.method(
          #setAppId,
          [appId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setLogLevel(
    _i9.OSLogLevel? logLevel,
    _i9.OSLogLevel? visualLevel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLogLevel,
          [
            logLevel,
            visualLevel,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void setNotificationOpenedHandler(_i8.OpenedNotificationHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setNotificationOpenedHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setSubscriptionObserver(_i8.SubscriptionChangedHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setSubscriptionObserver,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setPermissionObserver(_i8.PermissionChangeHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setPermissionObserver,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setEmailSubscriptionObserver(
          _i8.EmailSubscriptionChangeHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setEmailSubscriptionObserver,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setSMSSubscriptionObserver(_i8.SMSSubscriptionChangeHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setSMSSubscriptionObserver,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setInAppMessageClickedHandler(_i8.InAppMessageClickedHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setInAppMessageClickedHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setOnWillDisplayInAppMessageHandler(
          _i8.OnWillDisplayInAppMessageHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnWillDisplayInAppMessageHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setOnDidDisplayInAppMessageHandler(
          _i8.OnDidDisplayInAppMessageHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnDidDisplayInAppMessageHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setOnWillDismissInAppMessageHandler(
          _i8.OnWillDismissInAppMessageHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnWillDismissInAppMessageHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setOnDidDismissInAppMessageHandler(
          _i8.OnDidDismissInAppMessageHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnDidDismissInAppMessageHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setNotificationWillShowInForegroundHandler(
          _i8.NotificationWillShowInForegroundHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setNotificationWillShowInForegroundHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void completeNotification(
    String? notificationId,
    bool? shouldDisplay,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #completeNotification,
          [
            notificationId,
            shouldDisplay,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> setLaunchURLsInApp(bool? isEnabled) => (super.noSuchMethod(
        Invocation.method(
          #setLaunchURLsInApp,
          [isEnabled],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setRequiresUserPrivacyConsent(bool? required) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRequiresUserPrivacyConsent,
          [required],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> consentGranted(bool? granted) => (super.noSuchMethod(
        Invocation.method(
          #consentGranted,
          [granted],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<bool> userProvidedPrivacyConsent() => (super.noSuchMethod(
        Invocation.method(
          #userProvidedPrivacyConsent,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> requiresUserPrivacyConsent() => (super.noSuchMethod(
        Invocation.method(
          #requiresUserPrivacyConsent,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> promptUserForPushNotificationPermission(
          {bool? fallbackToSettings = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #promptUserForPushNotificationPermission,
          [],
          {#fallbackToSettings: fallbackToSettings},
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<Map<String, dynamic>> sendTag(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTag,
          [
            key,
            value,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> sendTags(Map<String, dynamic>? tags) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTags,
          [tags],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> getTags() => (super.noSuchMethod(
        Invocation.method(
          #getTags,
          [],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> deleteTag(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTag,
          [key],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> deleteTags(List<String>? keys) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTags,
          [keys],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<_i10.OSDeviceState?> getDeviceState() => (super.noSuchMethod(
        Invocation.method(
          #getDeviceState,
          [],
        ),
        returnValue: _i6.Future<_i10.OSDeviceState?>.value(),
        returnValueForMissingStub: _i6.Future<_i10.OSDeviceState?>.value(),
      ) as _i6.Future<_i10.OSDeviceState?>);
  @override
  _i6.Future<void> disablePush(bool? disable) => (super.noSuchMethod(
        Invocation.method(
          #disablePush,
          [disable],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<Map<String, dynamic>> postNotificationWithJson(
          Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #postNotificationWithJson,
          [json],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> postNotification(
          _i11.OSCreateNotification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #postNotification,
          [notification],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<void> clearOneSignalNotifications() => (super.noSuchMethod(
        Invocation.method(
          #clearOneSignalNotifications,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> enterLiveActivity(
    String? activityId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #enterLiveActivity,
          [
            activityId,
            token,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> exitLiveActivity(String? activityId) => (super.noSuchMethod(
        Invocation.method(
          #exitLiveActivity,
          [activityId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void removeNotification(int? notificationId) => super.noSuchMethod(
        Invocation.method(
          #removeNotification,
          [notificationId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> promptLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #promptLocationPermission,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setLocationShared(bool? shared) => (super.noSuchMethod(
        Invocation.method(
          #setLocationShared,
          [shared],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setEmail({
    required String? email,
    String? emailAuthHashToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setEmail,
          [],
          {
            #email: email,
            #emailAuthHashToken: emailAuthHashToken,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> logoutEmail() => (super.noSuchMethod(
        Invocation.method(
          #logoutEmail,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<Map<String, dynamic>> setSMSNumber({
    required String? smsNumber,
    String? smsAuthHashToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSMSNumber,
          [],
          {
            #smsNumber: smsNumber,
            #smsAuthHashToken: smsAuthHashToken,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> logoutSMSNumber() => (super.noSuchMethod(
        Invocation.method(
          #logoutSMSNumber,
          [],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> setExternalUserId(
    String? externalId, [
    String? authHashToken,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #setExternalUserId,
          [
            externalId,
            authHashToken,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> removeExternalUserId() =>
      (super.noSuchMethod(
        Invocation.method(
          #removeExternalUserId,
          [],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> setLanguage(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLanguage,
          [language],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<void> addTrigger(
    String? key,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTrigger,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> addTriggers(Map<String, Object>? triggers) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTriggers,
          [triggers],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> removeTriggerForKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeTriggerForKey,
          [key],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> removeTriggersForKeys(List<String>? keys) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTriggersForKeys,
          [keys],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<Object?> getTriggerValueForKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getTriggerValueForKey,
          [key],
        ),
        returnValue: _i6.Future<Object?>.value(),
        returnValueForMissingStub: _i6.Future<Object?>.value(),
      ) as _i6.Future<Object?>);
  @override
  _i6.Future<void> pauseInAppMessages(bool? pause) => (super.noSuchMethod(
        Invocation.method(
          #pauseInAppMessages,
          [pause],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i3.OSOutcomeEvent> sendOutcome(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOutcome,
          [name],
        ),
        returnValue: _i6.Future<_i3.OSOutcomeEvent>.value(_FakeOSOutcomeEvent_6(
          this,
          Invocation.method(
            #sendOutcome,
            [name],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.OSOutcomeEvent>.value(_FakeOSOutcomeEvent_6(
          this,
          Invocation.method(
            #sendOutcome,
            [name],
          ),
        )),
      ) as _i6.Future<_i3.OSOutcomeEvent>);
  @override
  _i6.Future<_i3.OSOutcomeEvent> sendUniqueOutcome(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendUniqueOutcome,
          [name],
        ),
        returnValue: _i6.Future<_i3.OSOutcomeEvent>.value(_FakeOSOutcomeEvent_6(
          this,
          Invocation.method(
            #sendUniqueOutcome,
            [name],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.OSOutcomeEvent>.value(_FakeOSOutcomeEvent_6(
          this,
          Invocation.method(
            #sendUniqueOutcome,
            [name],
          ),
        )),
      ) as _i6.Future<_i3.OSOutcomeEvent>);
  @override
  _i6.Future<_i3.OSOutcomeEvent> sendOutcomeWithValue(
    String? name,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOutcomeWithValue,
          [
            name,
            value,
          ],
        ),
        returnValue: _i6.Future<_i3.OSOutcomeEvent>.value(_FakeOSOutcomeEvent_6(
          this,
          Invocation.method(
            #sendOutcomeWithValue,
            [
              name,
              value,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.OSOutcomeEvent>.value(_FakeOSOutcomeEvent_6(
          this,
          Invocation.method(
            #sendOutcomeWithValue,
            [
              name,
              value,
            ],
          ),
        )),
      ) as _i6.Future<_i3.OSOutcomeEvent>);
}

/// A class which mocks [LocalLanguageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalLanguageProvider extends _i1.Mock
    implements _i12.LocalLanguageProvider {
  @override
  String get lastChangedKey => (super.noSuchMethod(
        Invocation.getter(#lastChangedKey),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get lastChangedOnesignalKey => (super.noSuchMethod(
        Invocation.getter(#lastChangedOnesignalKey),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i6.Future<String?> getLastChanged() => (super.noSuchMethod(
        Invocation.method(
          #getLastChanged,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
        returnValueForMissingStub: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);
  @override
  _i6.Future<String?> getLastChangedOnesignal() => (super.noSuchMethod(
        Invocation.method(
          #getLastChangedOnesignal,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
        returnValueForMissingStub: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);
  @override
  _i6.Future<void> updateLastChanged(String? language) => (super.noSuchMethod(
        Invocation.method(
          #updateLastChanged,
          [language],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> updateLastChangedOnesignal(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLastChangedOnesignal,
          [language],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [LanguageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageRepository extends _i1.Mock
    implements _i13.LanguageRepository {
  @override
  _i6.Future<_i14.DeviceLanguage?> getLastChanged() => (super.noSuchMethod(
        Invocation.method(
          #getLastChanged,
          [],
        ),
        returnValue: _i6.Future<_i14.DeviceLanguage?>.value(),
        returnValueForMissingStub: _i6.Future<_i14.DeviceLanguage?>.value(),
      ) as _i6.Future<_i14.DeviceLanguage?>);
  @override
  _i6.Future<_i14.DeviceLanguage?> getLastChangedOnesignal() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastChangedOnesignal,
          [],
        ),
        returnValue: _i6.Future<_i14.DeviceLanguage?>.value(),
        returnValueForMissingStub: _i6.Future<_i14.DeviceLanguage?>.value(),
      ) as _i6.Future<_i14.DeviceLanguage?>);
  @override
  _i6.Future<void> updateLastChanged(_i14.DeviceLanguage? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLastChanged,
          [language],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> updateLastChangedOnesignal(_i14.DeviceLanguage? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLastChangedOnesignal,
          [language],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [LanguageBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageBloc extends _i1.Mock implements _i4.LanguageBloc {
  @override
  _i4.LanguageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLanguageState_7(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeLanguageState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.LanguageState);
  @override
  _i6.Stream<_i4.LanguageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.LanguageState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i4.LanguageState>.empty(),
      ) as _i6.Stream<_i4.LanguageState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i4.LanguageEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i4.LanguageEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i4.LanguageState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i4.LanguageEvent>(
    _i15.EventHandler<E, _i4.LanguageState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i15.Transition<_i4.LanguageEvent, _i4.LanguageState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void onChange(_i15.Change<_i4.LanguageState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
